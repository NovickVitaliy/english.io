services:
  authentication.api:
    container_name: authentication.api
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ASPNETCORE_HTTP_PORTS=${ASPNETCORE_HTTP_PORTS}
      - ConnectionStrings__Default=${AUTH_DB_CONNECTION_STRING}
      - NotificationsApi__Http=http://notifications-api:8080/
      - NotificationsApi__Https=https://notifications-api:8081/
      - NotificationsApi__IsHttps=false
      - NotificationsApi__Key=${NOTIFICATIONS_API_KEY}
    env_file:
      - .env
    ports:
      - "${AUTH_API_PORT}:${ASPNETCORE_HTTP_PORTS}"
    depends_on:
      auth.db:
        condition: service_started
      rabbitmq-broker:
        condition: service_healthy

  learning.api:
    container_name: learning.api
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ASPNETCORE_HTTP_PORTS=${ASPNETCORE_HTTP_PORTS}
      - MongoOptions__ConnectionString=${MONGO_OPTIONS_CONNECTION_STRING}
      - MongoOptions__DatabaseName=${MONGO_OPTIONS_DATABASE_NAME}
      - AiLearningPrompts__PromptForWordTranslatingWithExampleSentences=${PROMPT_FOR_TRANSLATING_WORD_WITH_EXAMPLE}
      - AiLearningPrompts__PromptForCheckingIfWordCompliesToTheTopic=${PROMPT_FOR_CHECKING_IF_WORD_COMPLIES_TO_THE_TOPIC}
      - AiLearningPrompts__PromptForGeneratingReadingComprehensionExercise=${PROMPT_FOR_GENERATING_THE_READING_COMPREHENSION}
      - AiLearningPrompts__PromptForCheckingIfReadingComprehensionExercise=${PROMPT_FOR_CHECKING_THE_READING_COMPREHENSION}
      - GeminiOptions__ApiKey=${GEMINI_API_KEY}
      - GeminiOptions__GenerateContentUrl=${GEMINI_GENERATE_CONTENT_URL}
      - ConnectionStrings__RedisCache=redis-cache:6379
      - ConnectionStrings__SchedulingDatabase=${SCHEDULE_DATABASE_CONNECTION_STRING}
      - NotificationsApi__Key=${LEARNING_NOTIFICATIONS_API_KEY}
      - NotificationsApi__Http=${LEARNING_NOTIFICATIONS_HTTP}
      - NotificationsApi__Https=${LEARNING_NOTIFICATIONS_HTTPS}
      - NotificationsApi__IsHttps=${LEARNING_NOTIFICATIONS_IS_HTTPS}
    ports:
      - "${LEARNING_API_PORT}:${ASPNETCORE_HTTP_PORTS}"
    env_file:
      - .env
    depends_on:
      learning.db:
        condition: service_started
      rabbitmq-broker:
        condition: service_healthy

  notifications.api:
    container_name: notifications-api
    restart: always
    env_file:
      - .env
    ports:
      - "${NOTIFICATIONS_API_PORT}:${ASPNETCORE_HTTP_PORTS}"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ASPNETCORE_HTTP_PORTS=${ASPNETCORE_HTTP_PORTS}
      - MailSettings__Server=${MAILSETTINGS_SERVER}
      - MailSettings__Port=${MAILSETTINGS_PORT}
      - MailSettings__SenderName=${MAILSETTINGS_SENDERNAME}
      - MailSettings__SenderEmail=${MAILSETTINGS_SENDEREMAIL}
      - MailSettings__Password=${MAILSETTINGS_PASSWORD}
      - MailSettings__Username=${MAILSETTINGS_USERNAME}
      - ConnectionStrings__Default=Host=notifications.db;Port=5432;Database=notifications.db;Username=notifications.api;Password=12345
    depends_on:
      - notifications.db

  text-to-speech.api:
    container_name: text-to-speech.api
    ports:
      - "${TTS_PORT}:5003"
    environment:
      - FLASK_ENV=production
      - LANG=${LANG:-en}
    restart: unless-stopped

  auth.db:
    container_name: auth.db
    restart: always
    environment:
      - POSTGRES_PASSWORD=${AUTH_POSTGRES_PASSWORD}
      - POSTGRES_USER=${AUTH_POSTGRES_USER}
      - POSTGRES_DB=${AUTH_POSTGRES_DB}
    ports:
      - "${AUTH_POSTGRES_PORT}:5432"
    volumes:
      - ${AUTH_AUTH_DB_VOLUME}:/var/lib/postgresql/data

  client.app:
    container_name: client.app
    restart: always
    ports:
      - "${CLIENT_APP_PORT}:${ASPNETCORE_HTTP_PORTS}"
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ASPNETCORE_HTTP_PORTS=${ASPNETCORE_HTTP_PORTS}
      - Services__Authentication=${CLIENT_SERVICES_AUTHENTICATION}
      - Services__Learning=${CLIENT_SERVICES_LEARNING}
      - Services__TextToSpeech=${CLIENT_SERVICES_TEXT_TO_SPEECH}
      - PreferencesConfiguringHubOptions__HubUrl=${CLIENT_PREFERENCES_CONFIGURATION_HUB_URL}
      - ClientOptions__Domain=localhost
      - ClientOptions__HttpPort=5100
      - ClientOptions__HttpsPort=5101
      - ClientOptions__IsHttps=false
    depends_on:
      - authentication.api
      - learning.api
      - text-to-speech.api

  learning.db:
    container_name: learning.db
    restart: always
    ports:
      - "${LEARNING_DB_PORT}:27017"
    volumes:
      - ${LEARNING_DB_VOLUME}:/data/db

  notifications.db:
    container_name: notifications.db
    restart: always
    environment:
      - POSTGRES_PASSWORD=${NOTIFICATIONS_POSTGRES_PASSWORD}
      - POSTGRES_USER=${NOTIFICATIONS_POSTGRES_USER}
      - POSTGRES_DB=${NOTIFICATIONS_POSTGRES_DB}
    ports:
      - "${NOTIFICATIONS_POSTGRES_PORT}:5432"
    volumes:
      - ${NOTIFICATIONS_DB_VOLUME}:/var/lib/postgresql/data

  mongo-ui:
    container_name: mongo-ui
    restart: always
    ports:
      - "${MONGO_UI_PORT}:8081"
    environment:
      - ME_CONFIG_MONGODB_URL=${MONGO_DB_URL}
      - ME_CONFIG_BASICAUTH=${MONGO_UI_AUTH}
    profiles:
      - development

  rabbitmq-broker:
    container_name: rabbitmq-broker
    restart: always
    hostname: english-io
    environment:
      - RABBITMQ_DEFAULT_USER=${MESSAGE_BROKER_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${MESSAGE_BROKER_PASSWORD}
    ports:
      - "${RABBITMQ_BUS_PORT}:5672"
      - "${RABBITMQ_UI_PORT}:15672"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-cache:
    container_name: redis-cache
    restart: always
    ports:
      - "${REDIS_CACHE_PORT}:6379"

  telegram.bot.db:
    restart: always
    container_name: telegram.bot.db
    ports:
      - "${TELEGRAM_BOT_DB}:5432"
    environment:
      - POSTGRES_PASSWORD=${TELEGRAM_BOT_DB_POSTGRES_PASSWORD}
      - POSTGRES_USER=${TELEGRAM_BOT_DB_POSTGRES_USER}
      - POSTGRES_DB=${TELEGRAM_BOT_DB_POSTGRES_DB}
    volumes:
      - telegram.bot.db.volume:/var/lib/postgresql/data

  english.io.telegram.bot:
    restart: always
    container_name: english.io.telegram.bot
    environment:
      - ConnectionStrings__Default=Host=telegram.bot.db;Database=telegram.bot.db;Username=telegram.bot;Password=12345
      - TelegramBotToken=${TELEGRAM_BOT_TOKEN}
    env_file:
      - .env

  schedule-database:
    restart: always
    container_name: english.io.schedule.database
    environment:
      - POSTGRES_PASSWORD=${SCHEDULE_DB_POSTGRES_PASSWORD}
      - POSTGRES_USER=${SCHEDULE_DB_POSTGRES_USER}
      - POSTGRES_DB=${SCHEDULE_DB_POSTGRES_DB}
    ports:
      - "${SCHEDULE_DB_PORT}:5432"
    volumes:
      - english.io.schedule.database.volume:/var/lib/postgresql/data
